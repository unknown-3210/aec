CODE:
// Module for Basic Logic Gates 
module basic_gates(
input A, // First Input 
input B, // Second Input
output AND_OUT, OR_OUT, NOT_OUT_A, NAND_OUT, NOR_OUT, XOR_OUT, XNOR_OUT
);
// Logic Gate Implementations
assign AND_OUT = A & B; // AND Gate 
assign OR_OUT = A | B; // OR Gate
assign NOT_OUT_A = ~A; // NOT Gate (for input A) 
assign NAND_OUT = ~(A & B); // NAND Gate
assign NOR_OUT = ~(A | B); // NOR Gate 
assign XOR_OUT = A ^ B; // XOR Gate 
assign XNOR_OUT = ~(A ^ B); // XNOR Gate
endmodule
TEST BENCH:
// Testbench for Basic Gates 
module tb_basic_gates;
// Test Inputs and Outputs 
reg A, B;
wire AND_OUT, OR_OUT, NOT_OUT_A, NAND_OUT, NOR_OUT, XOR_OUT, XNOR_OUT;
// Instantiate the Basic Gates Module 
basic_gates uut
(.A(A),.B(B),.AND_OUT(AND_OUT),.OR_OUT(OR_OUT),.NOT_OUT_A(NOT_OUT_A),.NAND_
OUT(NAND_OUT),.NOR_OUT(NOR_OUT),.XOR_OUT(XOR_OUT),.XNOR_OUT(XNOR_OUT));
// Initial block for test cases 
initial begin
// Monitor outputs
$monitor("A=%b, B=%b | AND=%b, OR=%b, NOT_A=%b, NAND=%b, NOR=%b, XOR=%b, 
XNOR=%b",
A, B, AND_OUT, OR_OUT, NOT_OUT_A, NAND_OUT, NOR_OUT, XOR_OUT,
11
XNOR_OUT);
// Apply Test Vectors 
A = 0; B = 0; #10;
A = 0; B = 1; #10;
A = 1; B = 0; #10;
A = 1; B = 1; #10;
$finish; // End Simulation 
end
endmodule